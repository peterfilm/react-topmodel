# Generated by Django 5.0.4 on 2024-04-09 15:40

import django.core.validators
import django.db.models.manager
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='Name')),
                ('surname', models.CharField(max_length=50, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='Surname')),
                ('city', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='City')),
                ('country', models.CharField(max_length=100, validators=[django.core.validators.MinLengthValidator(2)], verbose_name='Country')),
                ('price_hour', models.PositiveIntegerField(verbose_name='Price per hour')),
                ('price_day', models.PositiveIntegerField(verbose_name='Price per day')),
                ('time_create', models.DateTimeField(auto_now_add=True, verbose_name='Register Date')),
                ('time_update', models.DateTimeField(auto_now=True, verbose_name='Date of update')),
                ('avatar', models.ImageField(blank=True, default=None, null=True, upload_to='avatars/', verbose_name='Avatar')),
                ('is_active', models.BooleanField(default=True, verbose_name='Active')),
                ('gender', models.CharField(choices=[('MALE', 'Male'), ('FEMALE', 'Female')], default='FEMALE', max_length=6, verbose_name='Gender')),
                ('height', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(150)], verbose_name='Height')),
                ('weight', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(40)], verbose_name='Weight')),
                ('bust', models.PositiveIntegerField(verbose_name='Bust')),
                ('weist', models.PositiveIntegerField(verbose_name='Weist')),
                ('hips', models.PositiveIntegerField(verbose_name='Hips')),
                ('shoes', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(25)], verbose_name='Shoes')),
                ('hair', models.CharField(choices=[('Blonde', 'Blonde'), ('Brunette', 'Brunette'), ('Red hair', 'Red hair'), ('Black hair', 'Black hair'), ('Brown hair', 'Brown hair'), ('Auburn hair', 'Auburn hair'), ('Gray hair', 'Gray hair'), ('White hair', 'White hair')], default='Brunette', max_length=11, verbose_name='Hair')),
                ('eyes', models.CharField(choices=[('Amber', 'Amber'), ('Blue', 'Blue'), ('Brown', 'Brown'), ('Gray', 'Gray'), ('Green', 'Green'), ('Hazel', 'Hazel'), ('Red', 'Red')], default='Brown', max_length=11, verbose_name='Eyes')),
                ('bio', models.TextField(blank=True, max_length=5000, verbose_name='Biography')),
                ('past_clients', models.TextField(blank=True, verbose_name='Past clients')),
                ('experience', models.DateField(verbose_name='Experience')),
                ('top_model', models.BooleanField(default=True, verbose_name='Top model')),
                ('agency', models.CharField(blank=True, max_length=100, verbose_name='Agency')),
                ('vk', models.CharField(blank=True, help_text='example: https://vk.com/myname', max_length=100, verbose_name='VK')),
                ('instagram', models.CharField(blank=True, help_text='example: https://instagram.com/myname', max_length=100, verbose_name='Instagram')),
                ('facebook', models.CharField(blank=True, help_text='example: https://facebook.com/myname', max_length=100, verbose_name='Facebook')),
                ('telegram', models.CharField(blank=True, help_text='example: https://telegram.com/myname', max_length=100, verbose_name='Telegram')),
            ],
            managers=[
                ('published', django.db.models.manager.Manager()),
            ],
        ),
    ]
